{"version":3,"file":"useSyncControlledState-6116efef.js","sources":["../node_modules/@babel/runtime/helpers/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/nonIterableRest.js","../node_modules/@babel/runtime/helpers/slicedToArray.js","../src/common/util/useSyncRefState.js","../src/common/util/useReducerWithMiddleware.js","../src/common/util/useSyncControlledState.js"],"sourcesContent":["function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest;","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","import * as React from 'react';\n\nconst useSyncRefState = (name, context, state) => {\n  React.useEffect(() => {\n    if (!context) return;\n\n    context.current[name] = {\n      state,\n    };\n  }, [context, name, state]);\n};\n\nexport { useSyncRefState };\n","import * as React from 'react';\n\nconst useReducerWithMiddleware = (\n  reducer,\n  controlledState,\n  middlewareFns,\n  afterwareFns,\n  context\n) => {\n  const [state, dispatch] = React.useReducer(\n    reducer,\n    controlledState\n  );\n\n  const aRef = React.useRef();\n\n  const dispatchWithMiddleware = (action) => {\n    middlewareFns.forEach((middlewareFn) =>\n      middlewareFn(\n        action,\n        state,\n        context ? context.current : undefined\n      )\n    );\n\n    aRef.current = action;\n\n    dispatch(action);\n  };\n\n  React.useEffect(() => {\n    if (!aRef.current) return;\n\n    afterwareFns.forEach((afterwareFn) =>\n      afterwareFn(\n        aRef.current,\n        state,\n        context ? context.current : undefined\n      )\n    );\n\n    aRef.current = null;\n  }, [context, afterwareFns, state]);\n\n  return [state, dispatchWithMiddleware];\n};\n\nexport { useReducerWithMiddleware };\n","import * as React from 'react';\nimport isEqual from 'lodash.isequal';\n\nconst useSyncControlledState = (controlledState, state, callback) => {\n  const previousControlledState = React.useRef(controlledState);\n  const previousState = React.useRef(controlledState);\n\n  React.useEffect(() => {\n    if (!isEqual(state, previousState.current)) {\n      // do nothing, because it's a internal state change\n    } else if (\n      !isEqual(controlledState, previousControlledState.current) &&\n      !isEqual(controlledState, state)\n    ) {\n      callback();\n    }\n\n    previousControlledState.current = controlledState;\n    previousState.current = state;\n  }, [state, callback, controlledState]);\n};\n\nexport { useSyncControlledState };\n"],"names":["arr","Array","isArray","i","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","TypeError","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","useSyncRefState","name","context","state","React","useEffect","current","useReducerWithMiddleware","reducer","controlledState","middlewareFns","afterwareFns","useReducer","dispatch","aRef","useRef","forEach","afterwareFn","action","middlewareFn","useSyncControlledState","callback","previousControlledState","previousState","isEqual"],"mappings":"uGAIA,MAJA,SAAyBA,GACvB,GAAIC,MAAMC,QAAQF,GAAM,OAAOA,GC0BjC,MA3BA,SAA+BA,EAAKG,GAClC,GAAsB,oBAAXC,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAETd,GAAKI,EAAKW,SAAWf,GAH8CK,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,UAEL,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,iBAE5C,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,ICpBT,MAJA,WACE,MAAM,IAAIa,UAAU,oJCOtB,SAAwBpB,EAAKG,GAC3B,OAAOkB,EAAerB,IAAQsB,EAAqBtB,EAAKG,IAAMoB,EAA2BvB,EAAKG,IAAMqB,KCPhGC,EAAkB,SAACC,EAAMC,EAASC,GACtCC,EAAMC,WAAU,WACTH,IAELA,EAAQI,QAAQL,GAAQ,CACtBE,MAAAA,MAED,CAACD,EAASD,EAAME,KCPfI,EAA2B,SAC/BC,EACAC,EACAC,EACAC,EACAT,SAE0BE,EAAMQ,WAC9BJ,EACAC,YAFKN,OAAOU,OAKRC,EAAOV,EAAMW,gBAgBnBX,EAAMC,WAAU,WACTS,EAAKR,UAEVK,EAAaK,SAAQ,SAACC,UACpBA,EACEH,EAAKR,QACLH,EACAD,EAAUA,EAAQI,aAAUpB,MAIhC4B,EAAKR,QAAU,QACd,CAACJ,EAASS,EAAcR,IAEpB,CAACA,EA5BuB,SAACe,GAC9BR,EAAcM,SAAQ,SAACG,UACrBA,EACED,EACAf,EACAD,EAAUA,EAAQI,aAAUpB,MAIhC4B,EAAKR,QAAUY,EAEfL,EAASK,MCxBPE,EAAyB,SAACX,EAAiBN,EAAOkB,OAChDC,EAA0BlB,EAAMW,OAAON,GACvCc,EAAgBnB,EAAMW,OAAON,GAEnCL,EAAMC,WAAU,WACTmB,EAAQrB,EAAOoB,EAAcjB,WAG/BkB,EAAQf,EAAiBa,EAAwBhB,UACjDkB,EAAQf,EAAiBN,IAE1BkB,KAGFC,EAAwBhB,QAAUG,EAClCc,EAAcjB,QAAUH,IACvB,CAACA,EAAOkB,EAAUZ"}