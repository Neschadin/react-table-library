{"version":3,"file":"index-71947a4f.js","sources":["../src/common/components/Checkbox/styles.js","../src/common/components/Checkbox/index.js","../src/select/Checkbox.js","../src/select/config.js","../src/select/CellSelect.js","../src/select/HeaderCellSelect.js","../src/select/useRowSelect.js"],"sourcesContent":["export default () => `\n  cursor: pointer;\n`;\n","import * as React from 'react';\n\nimport styles from './styles';\n\nconst Checkbox = React.forwardRef((props, ref) => {\n  return (\n    <input type=\"checkbox\" ref={ref} {...props} css={styles()} />\n  );\n});\n\nexport { Checkbox };\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Checkbox as CheckboxBase } from '@table-library/react-table-library/common/components/Checkbox';\n\nconst Checkbox = ({ checked, isIndeterminate, onChange }) => {\n  const ref = (node) => {\n    if (!node) return;\n\n    if (checked) {\n      node.indeterminate = false;\n      node.checked = true;\n    } else if (isIndeterminate) {\n      node.indeterminate = true;\n      node.checked = false;\n    } else {\n      node.indeterminate = false;\n      node.checked = false;\n    }\n  };\n\n  return (\n    <CheckboxBase ref={ref} type=\"checkbox\" onChange={onChange} />\n  );\n};\n\nCheckbox.propTypes = {\n  checked: PropTypes.bool,\n  isIndeterminate: PropTypes.bool,\n  onChange: PropTypes.func,\n};\n\nexport { Checkbox };\n","export const SELECT_CLICK_TYPES = {\n  RowClick: 'RowClick',\n  ButtonClick: 'ButtonClick',\n};\n\nexport const SELECT_TYPES = {\n  SingleSelect: 'SingleSelect',\n  MultiSelect: 'MultiSelect',\n};\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Cell } from '@table-library/react-table-library/table/Cell';\nimport { SelectContext } from '@table-library/react-table-library/common/context/Select';\n\nimport { Checkbox } from './Checkbox';\nimport { SELECT_TYPES } from './config';\n\nconst CellSelect = React.memo(\n  ({ item, children, ...passThrough }) => {\n    const select = React.useContext(SelectContext);\n\n    const isSelected =\n      select._options.buttonSelect === SELECT_TYPES.SingleSelect\n        ? select.state.id === item.id ||\n          select.state.ids.includes(item.id)\n        : select.state.ids.includes(item.id);\n\n    const handleChange = () => {\n      const isSingleSelect =\n        select._options.buttonSelect === SELECT_TYPES.SingleSelect;\n\n      if (isSingleSelect) {\n        select.fns.onToggleByIdExclusively(item.id);\n      } else {\n        select.fns.onToggleByIdRecursively(item.id, {\n          isCarryForward: select._options.isCarryForward,\n        });\n      }\n    };\n\n    return (\n      <Cell shrink {...passThrough}>\n        <Checkbox\n          select={select}\n          checked={isSelected}\n          onChange={handleChange}\n        />\n      </Cell>\n    );\n  }\n);\n\nCellSelect.propTypes = {\n  item: PropTypes.objectOf(PropTypes.any),\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n    PropTypes.func,\n  ]),\n};\n\nexport { CellSelect };\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { SelectContext } from '@table-library/react-table-library/common/context/Select';\nimport { HeaderCell } from '@table-library/react-table-library/table/Cell';\n\nimport { Checkbox } from './Checkbox';\nimport { SELECT_TYPES } from './config';\n\nconst HeaderCellSelect = React.memo(\n  ({ children, ...passThrough }) => {\n    const select = React.useContext(SelectContext);\n\n    const isSelected = select.state.all;\n    const isIndeterminate =\n      (!select.state.all && !select.state.none) ||\n      (select._options.buttonSelect === SELECT_TYPES.SingleSelect &&\n        select.state.id != null);\n\n    const handleChange = () => select.fns.onToggleAll();\n\n    return (\n      <HeaderCell shrink {...passThrough}>\n        <Checkbox\n          checked={isSelected}\n          isIndeterminate={isIndeterminate}\n          onChange={handleChange}\n        />\n      </HeaderCell>\n    );\n  }\n);\n\nHeaderCellSelect.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n    PropTypes.func,\n  ]),\n};\n\nexport { HeaderCellSelect };\n","import cs from 'classnames';\n\nimport * as COLORS from '@table-library/react-table-library/common/colors';\nimport { isRowClick } from '@table-library/react-table-library/common/util/isRowClick';\nimport { useIdReducer } from '@table-library/react-table-library/common/util/useIdReducer';\nimport { useSyncRefState } from '@table-library/react-table-library/common/util/useSyncRefState';\n\nimport { SELECT_TYPES, SELECT_CLICK_TYPES } from './config';\n\nconst getRowProps = (props, features) => {\n  const { item } = props;\n\n  const { select } = features;\n\n  const isMultiSelected = select.state.ids.includes(item.id);\n  const isSingleSelect = select.state.id === item.id;\n\n  const theme = `\n    &.row-select-selected,\n    &.row-select-single-selected {\n      color: ${COLORS.FONT_PRIMARY};\n      font-weight: bold;\n\n      background-color: ${COLORS.ROW_SELECTED};\n    }\n\n    &.row-select-clickable {\n      cursor: pointer;\n    }\n  `;\n\n  const className = cs('row-select', {\n    'row-select-clickable':\n      select._options.clickType === SELECT_CLICK_TYPES.RowClick,\n    'row-select-selected': isMultiSelected,\n    'row-select-single-selected': isSingleSelect,\n  });\n\n  const onClick = (node, event) => {\n    if (!isRowClick(event)) return;\n\n    if (select._options.clickType !== SELECT_CLICK_TYPES.RowClick)\n      return;\n\n    if (select._options.rowSelect === SELECT_TYPES.SingleSelect) {\n      select.fns.onToggleByIdExclusively(node.id);\n    } else {\n      select.fns.onToggleById(node.id);\n    }\n  };\n\n  return {\n    theme,\n    className,\n    onClick,\n  };\n};\n\nconst DEFAULT_STATE = {\n  ids: [],\n  id: null,\n};\n\nconst DEFAULT_OPTIONS = {\n  clickType: SELECT_CLICK_TYPES.RowClick,\n  rowSelect: SELECT_TYPES.SingleSelect,\n  buttonSelect: SELECT_TYPES.MultiSelect,\n  isCarryForward: false,\n};\n\nconst useRowSelect = (data, primary = {}, options = {}, context) => {\n  const primaryNullFallback = primary || {};\n  const controlledState = {\n    ...DEFAULT_STATE,\n    ...primaryNullFallback.state,\n  };\n  const onChange = primaryNullFallback.onChange || (() => {});\n\n  const [state, fns] = useIdReducer(\n    data,\n    controlledState,\n    onChange,\n    context\n  );\n\n  useSyncRefState('select', context, state);\n\n  const mergedOptions = {\n    ...DEFAULT_OPTIONS,\n    ...options,\n  };\n\n  return {\n    state,\n    fns,\n    _options: mergedOptions,\n    _getRowProps: getRowProps,\n  };\n};\n\nexport { useRowSelect };\n"],"names":["Checkbox","React","forwardRef","props","ref","type","checked","isIndeterminate","onChange","CheckboxBase","node","indeterminate","propTypes","PropTypes","bool","func","SELECT_CLICK_TYPES","RowClick","ButtonClick","SELECT_TYPES","SingleSelect","MultiSelect","CellSelect","memo","item","children","passThrough","select","useContext","SelectContext","isSelected","_options","buttonSelect","state","id","ids","includes","Cell","shrink","fns","onToggleByIdExclusively","onToggleByIdRecursively","isCarryForward","objectOf","any","oneOfType","arrayOf","HeaderCellSelect","all","none","HeaderCell","onToggleAll","getRowProps","features","isMultiSelected","isSingleSelect","theme","COLORS","className","cs","clickType","onClick","event","isRowClick","rowSelect","onToggleById","DEFAULT_STATE","DEFAULT_OPTIONS","useRowSelect","data","primary","options","context","primaryNullFallback","controlledState","useIdReducer","useSyncRefState","mergedOptions","_getRowProps"],"mappings":"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"}