{"version":3,"file":"fromTreeToList-dfd2fc61.js","sources":["../src/common/util/tree/hasLeaves.js","../src/common/util/tree/findNodeById.js","../src/common/util/tree/fromTreeToList.js"],"sourcesContent":["export const hasLeaves = (node) => !!node.nodes?.length;\n","export const findNodeById = (nodes, id) =>\n  nodes.reduce((acc, value) => {\n    if (acc) return acc;\n\n    if (value.id === id) {\n      return value;\n    }\n\n    if (value.nodes) {\n      return findNodeById(value.nodes, id);\n    }\n\n    return acc;\n  }, null);\n","import { hasLeaves } from './hasLeaves';\n\nexport const fromTreeToList = (nodes) =>\n  (nodes || []).reduce((acc, value) => {\n    // eslint-disable-next-line no-param-reassign\n    acc = acc.concat(value);\n\n    if (value.nodes) {\n      // eslint-disable-next-line no-param-reassign\n      acc = acc.concat(fromTreeToList(value.nodes));\n    }\n\n    return acc;\n  }, []);\n\nexport const fromTreeToListExtended = (\n  data,\n  nodes,\n  tree,\n  treeXLevel = 0,\n  treeYLevel = 0,\n  parentNode = null\n) =>\n  (nodes || []).reduce((acc, value) => {\n    let listNode;\n\n    if (value.nodes) {\n      listNode = { ...value, nodes: [] };\n    } else {\n      listNode = value;\n    }\n\n    const extendedNode = {\n      treeXLevel,\n      treeYLevel,\n      parentNode: parentNode || data,\n      ancestors: parentNode\n        ? [parentNode, ...parentNode.ancestors]\n        : [parentNode || data],\n    };\n\n    listNode = {\n      ...listNode,\n      ...extendedNode,\n    };\n\n    // eslint-disable-next-line no-param-reassign\n    acc = acc.concat(listNode);\n\n    if (hasLeaves(value) && tree.state.ids.includes(value.id)) {\n      // eslint-disable-next-line no-param-reassign\n      acc = acc.concat(\n        fromTreeToListExtended(\n          data,\n          value.nodes,\n          tree,\n          treeXLevel + 1,\n          treeYLevel,\n          { ...value, ...extendedNode }\n        )\n      );\n    }\n\n    return acc;\n  }, []);\n"],"names":["hasLeaves","node","nodes","_node$nodes","length","findNodeById","id","reduce","acc","value","fromTreeToList","concat","fromTreeToListExtended","data","tree","treeXLevel","treeYLevel","parentNode","listNode","extendedNode","ancestors","state","ids","includes"],"mappings":"yGAAaA,EAAY,SAACC,2BAAWA,EAAKC,qBAALC,EAAYC,SCApCC,EAAe,SAAfA,EAAgBH,EAAOI,UAClCJ,EAAMK,QAAO,SAACC,EAAKC,UACbD,IAEAC,EAAMH,KAAOA,EACRG,EAGLA,EAAMP,MACDG,EAAaI,EAAMP,MAAOI,GAG5BE,KACN,0kBCXQE,EAAiB,SAAjBA,EAAkBR,UAC5BA,GAAS,IAAIK,QAAO,SAACC,EAAKC,UAEzBD,EAAMA,EAAIG,OAAOF,GAEbA,EAAMP,QAERM,EAAMA,EAAIG,OAAOD,EAAeD,EAAMP,SAGjCM,IACN,KAEQI,EAAyB,SAAzBA,EACXC,EACAX,EACAY,OACAC,yDAAa,EACbC,yDAAa,EACbC,yDAAa,YAEZf,GAAS,IAAIK,QAAO,SAACC,EAAKC,OACrBS,EAGFA,EADET,EAAMP,aACQO,OAAOP,MAAO,KAEnBO,MAGPU,EAAe,CACnBJ,WAAAA,EACAC,WAAAA,EACAC,WAAYA,GAAcJ,EAC1BO,UAAWH,GACNA,YAAeA,EAAWG,YAC3B,CAACH,GAAcJ,WAGrBK,SACKA,GACAC,GAILX,EAAMA,EAAIG,OAAOO,GAEblB,EAAUS,IAAUK,EAAKO,MAAMC,IAAIC,SAASd,EAAMH,MAEpDE,EAAMA,EAAIG,OACRC,EACEC,EACAJ,EAAMP,MACNY,EACAC,EAAa,EACbC,SACKP,GAAUU,MAKdX,IACN"}